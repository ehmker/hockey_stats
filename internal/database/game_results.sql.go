// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: game_results.sql

package database

import (
	"context"
	"time"
)

const createGameResult = `-- name: CreateGameResult :one
INSERT INTO
    game_results (
        id,
        created_at, 
        updated_at, 
        season,
        date_played, 
        arena,
        attendance,
        duration,
        home_team, 
        home_team_score, 
        home_team_result, 
        home_team_record,
        away_team, 
        away_team_score, 
        away_team_result, 
        away_team_record
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, created_at, updated_at, date_played, season, arena, attendance, duration, home_team, home_team_score, home_team_result, home_team_record, away_team, away_team_score, away_team_result, away_team_record
`

type CreateGameResultParams struct {
	ID             string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Season         int32
	DatePlayed     time.Time
	Arena          string
	Attendance     int32
	Duration       time.Time
	HomeTeam       string
	HomeTeamScore  int32
	HomeTeamResult string
	HomeTeamRecord string
	AwayTeam       string
	AwayTeamScore  int32
	AwayTeamResult string
	AwayTeamRecord string
}

func (q *Queries) CreateGameResult(ctx context.Context, arg CreateGameResultParams) (GameResult, error) {
	row := q.db.QueryRowContext(ctx, createGameResult,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Season,
		arg.DatePlayed,
		arg.Arena,
		arg.Attendance,
		arg.Duration,
		arg.HomeTeam,
		arg.HomeTeamScore,
		arg.HomeTeamResult,
		arg.HomeTeamRecord,
		arg.AwayTeam,
		arg.AwayTeamScore,
		arg.AwayTeamResult,
		arg.AwayTeamRecord,
	)
	var i GameResult
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatePlayed,
		&i.Season,
		&i.Arena,
		&i.Attendance,
		&i.Duration,
		&i.HomeTeam,
		&i.HomeTeamScore,
		&i.HomeTeamResult,
		&i.HomeTeamRecord,
		&i.AwayTeam,
		&i.AwayTeamScore,
		&i.AwayTeamResult,
		&i.AwayTeamRecord,
	)
	return i, err
}

const getDateOfLastResult = `-- name: GetDateOfLastResult :one
SELECT date_played
From game_results
ORDER BY date_played DESC
LIMIT 1
`

func (q *Queries) GetDateOfLastResult(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getDateOfLastResult)
	var date_played time.Time
	err := row.Scan(&date_played)
	return date_played, err
}
