// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scoring_summary.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createScoringSummary = `-- name: CreateScoringSummary :one
INSERT INTO
    scoring_summaries (
        id,
        game_id,
        created_at,
        updated_at,
        period,
        time, 
        team,
        player,
        player_id,
        first_assist,
        first_assist_id,
        second_assist, 
        second_assist_id,
        empty_net
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, game_id, created_at, updated_at, period, time, team, player, player_id, first_assist, first_assist_id, second_assist, second_assist_id, empty_net
`

type CreateScoringSummaryParams struct {
	ID             uuid.UUID
	GameID         string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Period         string
	Time           time.Time
	Team           string
	Player         string
	PlayerID       string
	FirstAssist    sql.NullString
	FirstAssistID  sql.NullString
	SecondAssist   sql.NullString
	SecondAssistID sql.NullString
	EmptyNet       bool
}

func (q *Queries) CreateScoringSummary(ctx context.Context, arg CreateScoringSummaryParams) (ScoringSummary, error) {
	row := q.db.QueryRowContext(ctx, createScoringSummary,
		arg.ID,
		arg.GameID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Period,
		arg.Time,
		arg.Team,
		arg.Player,
		arg.PlayerID,
		arg.FirstAssist,
		arg.FirstAssistID,
		arg.SecondAssist,
		arg.SecondAssistID,
		arg.EmptyNet,
	)
	var i ScoringSummary
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Period,
		&i.Time,
		&i.Team,
		&i.Player,
		&i.PlayerID,
		&i.FirstAssist,
		&i.FirstAssistID,
		&i.SecondAssist,
		&i.SecondAssistID,
		&i.EmptyNet,
	)
	return i, err
}
